/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.projectdb;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author MICHAL
 */
public class Battlefield extends javax.swing.JFrame {

    /**
     * Creates new form Battlefield
     */
    String connector = "org.postgresql.Driver";
    String url = "jdbc:postgresql://localhost:5432/zoo";
    String user = "testuser";
    String password = "password";

    public Battlefield() {
        initComponents();
        locateFrame();
        fillCombo();
    }

    private void locateFrame() {
        Toolkit toolkit;
        toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 4, size.height / 2 + getHeight() / 4);
    }

    private void fillCombo() {
        try {
            Class.forName(connector);
            Connection con = DriverManager.getConnection(url, user, password);
            String sql = "SELECT  id, name, age, species_name, cage_size\n"
                    + "FROM   animals a  \n"
                    + "       LEFT OUTER JOIN species s on a.id_species = s.id_species\n"
                    + "       INNER JOIN cages c on c.cage_nr = a.cage_nr\n"
                    + "ORDER BY 1;";
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String name = rs.getString("name");
                box_player1.addItem(name);
                box_player2.addItem(name);
            }

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lbl_choose = new javax.swing.JLabel();
        box_player1 = new javax.swing.JComboBox<>();
        box_player2 = new javax.swing.JComboBox<>();
        btn_fight = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(76, 41, 211));

        lbl_choose.setBackground(new java.awt.Color(76, 41, 211));
        lbl_choose.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lbl_choose.setForeground(new java.awt.Color(204, 204, 204));
        lbl_choose.setText("Choose two animals and start the battle!");

        box_player1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        box_player2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        btn_fight.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btn_fight.setText("Fight!");
        btn_fight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_fightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(box_player1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(box_player2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(lbl_choose))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(btn_fight, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lbl_choose)
                .addGap(75, 75, 75)
                .addComponent(btn_fight)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(box_player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box_player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_fightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_fightActionPerformed
        // TODO add your handling code here:
        String player1 = (String) box_player1.getSelectedItem();
        String player2 = (String) box_player2.getSelectedItem();
        String cage_size1 = "";
        int id1 = 0;
        String species_name1 = "";
        String cage_size2 = "";
        int id2 = 0;
        String species_name2 = "";
        int reply;
        try {
            Class.forName(connector);
            Connection con = DriverManager.getConnection(url, user, password);
            if (player1.equals(player2)) {
                JOptionPane.showMessageDialog(null, "Choose two different opponents!");
            } else {
                String sql1 = "SELECT  id, name, species_name, cage_size\n"
                        + "FROM   animals a  \n"
                        + "       LEFT OUTER JOIN species s on a.id_species = s.id_species\n"
                        + "       INNER JOIN cages c on c.cage_nr = a.cage_nr\n"
                        + "WHERE name = '" + player1 + "'";
                PreparedStatement pst = con.prepareStatement(sql1);
                ResultSet rs = pst.executeQuery();

                while (rs.next()) {
                    cage_size1 = rs.getString("cage_size");
                    id1 = rs.getInt("id");
                    species_name1 = rs.getString("species_name");
                }
                rs.close();
                pst.close();

                String sql2 = "SELECT  id, name, species_name, cage_size\n"
                        + "FROM   animals a  \n"
                        + "       LEFT OUTER JOIN species s on a.id_species = s.id_species\n"
                        + "       INNER JOIN cages c on c.cage_nr = a.cage_nr\n"
                        + "WHERE name = '" + player2 + "'";
                pst = con.prepareStatement(sql2);
                rs = pst.executeQuery();

                while (rs.next()) {
                    cage_size2 = rs.getString("cage_size");
                    id2 = rs.getInt("id");
                    species_name2 = rs.getString("species_name");
                }

                String win1 = "The winner is ... the " + player1 + " " + species_name1 + " with an id = " + id1 + "!" + "\nCongratulations " + player1 + ", well done!";
                String win2 = "The winner is ... the " + player2 + " " + species_name2 + " with an id = " + id2 + "!" + "\nCongratulations " + player2 + ", well done!";
                String draw = "The fight ends in a draw! " + "Both " + player1 + " and " + player2 + " fought very hard.\nDo you want to do extra-time?";
                String extra1 = "After a fierce battle the winner is ... the " + player1 + " " + species_name1 + " with an id = " + id1 + "!" + "\nCongratulations " + player1 + ", well done!";
                String extra2 = "After a fierce battle the winner is ... the " + player2 + " " + species_name2 + " with an id = " + id2 + "!" + "\nCongratulations " + player2 + ", well done!";

                if (cage_size1.equals("S") && cage_size2.equals("M")) {
                    JOptionPane.showMessageDialog(null, win2);
                    dispose();
                }

                if (cage_size1.equals("S") && cage_size2.equals("L")) {
                    JOptionPane.showMessageDialog(null, win2);
                    dispose();
                }

                if (cage_size1.equals("M") && cage_size2.equals("S")) {
                    JOptionPane.showMessageDialog(null, win1);
                    dispose();
                }

                if (cage_size1.equals("M") && cage_size2.equals("L")) {
                    JOptionPane.showMessageDialog(null, win2);
                    dispose();
                }

                if (cage_size1.equals("L") && cage_size2.equals("S")) {
                    JOptionPane.showMessageDialog(null, win1);
                    dispose();
                }

                if (cage_size1.equals("L") && cage_size2.equals("M")) {
                    JOptionPane.showMessageDialog(null, win1);
                    dispose();
                }

                if (cage_size1.equals("S") && cage_size2.equals("S")) {
                    reply = JOptionPane.showConfirmDialog(null, draw, "Draw result", YES_NO_OPTION, QUESTION_MESSAGE);
                    if (reply == JOptionPane.YES_OPTION) {
                        int random = new Random().nextInt(2) + 1;
                        if (random == 1) {
                            JOptionPane.showMessageDialog(null, extra1);
                            dispose();
                        }
                        if (random == 2) {
                            JOptionPane.showMessageDialog(null, extra2);
                            dispose();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "There is no winner of this duel.");
                        dispose();
                    }
                }

                if (cage_size1.equals("M") && cage_size2.equals("M")) {
                    reply = JOptionPane.showConfirmDialog(null, draw, "Draw result", YES_NO_OPTION, QUESTION_MESSAGE);
                    if (reply == JOptionPane.YES_OPTION) {
                        int random = new Random().nextInt(2) + 1;
                        if (random == 1) {
                            JOptionPane.showMessageDialog(null, extra1);
                            dispose();
                        }
                        if (random == 2) {
                            JOptionPane.showMessageDialog(null, extra2);
                            dispose();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "There is no winner of this duel.");
                        dispose();
                    }
                }
                if (cage_size1.equals("L") && cage_size2.equals("L")) {
                    reply = JOptionPane.showConfirmDialog(null, "The fight ends in a draw! " + "Both " + player1 + " and " + player2 + " fought very hard.\nDo you want to do extra-time?", "Draw result", YES_NO_OPTION, QUESTION_MESSAGE);
                    if (reply == JOptionPane.YES_OPTION) {
                        int random = new Random().nextInt(2) + 1;
                        if (random == 1) {
                            JOptionPane.showMessageDialog(null, extra1);
                            dispose();
                        }
                        if (random == 2) {
                            JOptionPane.showMessageDialog(null, extra2);
                            dispose();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "There is no winner of this duel.");
                        dispose();
                    }
                }
            }

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_fightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Battlefield().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> box_player1;
    private javax.swing.JComboBox<String> box_player2;
    private javax.swing.JButton btn_fight;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbl_choose;
    // End of variables declaration//GEN-END:variables
}
